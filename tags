!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	include/Combination.h	/^class A$/;"	c
BackTrack	include/GenerateParenthesis.h	/^    static void BackTrack(std::vector<std::string>& ans, std::string curr, int open, int close, int max)$/;"	f	class:Solution
CC	Makefile	/^CC=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-g -Wall -std=c++14$/;"	m
Calc	include/StackProject.h	/^    void Calc()$/;"	f	class:pj
ConvertToZigzag	include/Zigzag.h	/^    static std::string ConvertToZigzag(std::string s, int numRows)$/;"	f	class:Solution
DEPS	Makefile	/^DEPS = $(OBJECTS:.o=.d)$/;"	m
DEPS	Makefile	/^DEPS = $(SRCS:.cpp=.d)$/;"	m
Evaluation	include/StackProject.h	/^    double Evaluation()$/;"	f	class:pj
FirstMissingPositive	include/FirstMissingPositive.h	/^int FirstMissingPositive(std::vector<int> nums)$/;"	f
GetResultFromInfixNotation	include/StackProject.h	/^    void GetResultFromInfixNotation()$/;"	f	class:pj
INCLUDE	Makefile	/^INCLUDE = -Iinclude\/ $/;"	m
IsValid	include/SudokuSolver.h	/^    bool IsValid(int row, int col, char c)$/;"	f	class:Solution
LIBS	Makefile	/^LIBS=$/;"	m
LIB_DIR	Makefile	/^LIB_DIR=$/;"	m
LengthOfLongestSubstring	include/LengthOfLongestSubstring.h	/^int LengthOfLongestSubstring(std::string s)$/;"	f
ListNode	include/AddTwoLinkedLists.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/AddTwoLinkedLists.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/AddTwoLinkedLists.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/AddTwoLinkedLists.h	/^struct ListNode {$/;"	s
ListNode	include/MergeKLists.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/MergeKLists.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/MergeKLists.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/MergeKLists.h	/^struct ListNode $/;"	s
ListNode	include/MergeTwoLists.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/MergeTwoLists.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/MergeTwoLists.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/MergeTwoLists.h	/^struct ListNode $/;"	s
ListNode	include/RemoveNthFromEnd.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/RemoveNthFromEnd.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/RemoveNthFromEnd.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/RemoveNthFromEnd.h	/^struct ListNode $/;"	s
ListNode	include/ReverseKGroup.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/ReverseKGroup.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/ReverseKGroup.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/ReverseKGroup.h	/^struct ListNode $/;"	s
ListNode	include/RotateList.h	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/RotateList.h	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/RotateList.h	/^    ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/RotateList.h	/^struct ListNode$/;"	s
ListNode	include/SwapPairs.h	/^     ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/SwapPairs.h	/^     ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	include/SwapPairs.h	/^     ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	include/SwapPairs.h	/^struct ListNode $/;"	s
MakeAnswer	include/N_Queens.h	/^    vector<string> MakeAnswer(const int& size)$/;"	f	class:Solution
OBJECTS	Makefile	/^OBJECTS = $(patsubst %.o,$(OBJ_DIR)\/%.o,$(OBJS))$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:.cpp=.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = .\/obj$/;"	m
PaliLength	include/LongestPalindrome.h	/^    static int PaliLength(int left, int right, string s)$/;"	f	class:Solution
Precedence	include/StackProject.h	/^    bool Precedence(const char o1, const char o2)$/;"	f	class:pj
PrintStack	include/StackProject.h	/^    void PrintStack(std::stack<std::string> &s)$/;"	f	class:pj
PrintVector	include/StackProject.h	/^    void PrintVector(const std::vector<std::string> &vec)$/;"	f	class:pj
RemoveDuplicates	include/RemoveDuplicates.h	/^int RemoveDuplicates(std::vector<int>& nums)$/;"	f
RemoveElement	include/RemoveElement.h	/^int RemoveElement(std::vector<int>& nums, int val)$/;"	f
S	include/LetterComb.h	/^class S$/;"	c
SRCS	Makefile	/^SRCS = $(notdir $(wildcard $(SRC_DIR)\/*.cpp))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = .\/src$/;"	m
SetBoard	include/SudokuSolver.h	/^    void SetBoard(std::vector< std::vector< char > >& board, bool yesno, char c, int row, int col)$/;"	f	class:Solution
Sol	include/Permutation.h	/^class Sol$/;"	c
Sol	include/Permutation2.h	/^class Sol$/;"	c
Sol2	include/Permutation.h	/^class Sol2$/;"	c
Sol2	include/Permutation2.h	/^class Sol2$/;"	c
Solution	include/AddTwoLinkedLists.h	/^class Solution {$/;"	c
Solution	include/CombinationSum.h	/^class Solution$/;"	c
Solution	include/CombinationSum2.h	/^class Solution$/;"	c
Solution	include/CountAndSay.h	/^class Solution$/;"	c
Solution	include/FindMedianSortedArrays.h	/^class Solution {$/;"	c
Solution	include/FourSum.h	/^class Solution {                                          \/\/What I did at first, and messed up.$/;"	c
Solution	include/GenerateParenthesis.h	/^class Solution $/;"	c
Solution	include/IntToRoman.h	/^class Solution$/;"	c
Solution	include/IsMatch.h	/^class Solution$/;"	c
Solution	include/IsPalindrome.h	/^class Solution $/;"	c
Solution	include/IsValid.h	/^class Solution$/;"	c
Solution	include/LongestCommonPrefix.h	/^class Solution$/;"	c
Solution	include/LongestPalindrome.h	/^class Solution {$/;"	c
Solution	include/LongestValidParentheses.h	/^class Solution$/;"	c
Solution	include/MaxArea.h	/^class Solution {$/;"	c
Solution	include/MergeInterval.h	/^class Solution $/;"	c
Solution	include/MergeKLists.h	/^class Solution$/;"	c
Solution	include/N_Queens.h	/^class Solution$/;"	c
Solution	include/NextPermutation.h	/^class Solution $/;"	c
Solution	include/Permutation.h	/^class Solution  \/\/ STL version$/;"	c
Solution	include/PermutationSequence.h	/^class Solution $/;"	c
Solution	include/RemoveNthFromEnd.h	/^class Solution {$/;"	c
Solution	include/ReverseInteger.h	/^class Solution {$/;"	c
Solution	include/ReverseKGroup.h	/^class Solution$/;"	c
Solution	include/RomanToInt.h	/^class Solution$/;"	c
Solution	include/RotateList.h	/^class Solution$/;"	c
Solution	include/SudokuSolver.h	/^class Solution $/;"	c
Solution	include/TwoSum.h	/^class Solution {$/;"	c
Solution	include/ValidSudoku.h	/^class Solution $/;"	c
Solution	include/WildcardMatch.h	/^class Solution                                          \/\/" abcda "$/;"	c
Solution	include/Zigzag.h	/^class Solution$/;"	c
Solution1	include/FourSum.h	/^class Solution1 {                                   \/\/What I wanted at first$/;"	c
Solution1	include/SpiralMatrix2.h	/^class Solution1$/;"	c
Solution2	include/N_Queens2.h	/^class Solution2$/;"	c
Solution2	include/SpiralMatrix2.h	/^class Solution2$/;"	c
Solution_Priority_Queue	include/MergeKLists.h	/^class Solution_Priority_Queue $/;"	c
StrStr	include/StrStr.h	/^int StrStr(const std::string& haystack, const std::string& needle)$/;"	f
TARGET	Makefile	/^TARGET=main$/;"	m
ThreeSum	include/ThreeSum.h	/^std::vector< std::vector< int > > ThreeSum(std::vector<int> vec)$/;"	f
ThreeSum	include/ThreeSumClosest.h	/^int ThreeSum(std::vector<int> vec, int target)$/;"	f
TwoSum	include/TwoSum.h	/^class TwoSum            \/\/Think it's better than looping twice like one below.$/;"	c
addBinary	include/AddBinary.h	/^std::string addBinary(std::string a, std::string b)$/;"	f
addTwoNumbers	include/AddTwoLinkedLists.h	/^    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)$/;"	f	class:Solution
addTwoNumbers2	include/AddTwoLinkedLists.h	/^    ListNode* addTwoNumbers2(ListNode* l1, ListNode* l2)$/;"	f	class:Solution
ans	include/Combination.h	/^    vector<vector<int> > ans;$/;"	m	class:A
ans	include/N_Queens.h	/^    vector<vector<string>> ans;$/;"	m	class:Solution
ans	include/Permutation.h	/^    vector<vector<int>> ans;$/;"	m	class:Sol
ans	include/Permutation.h	/^    vector<vector<int>> ans;$/;"	m	class:Sol2
ans	include/Permutation2.h	/^    std::vector<std::vector<int>> ans;$/;"	m	class:Sol
ans	include/Permutation2.h	/^    std::vector<std::vector<int>> ans;$/;"	m	class:Sol2
answer	include/CombinationSum.h	/^        std::vector< std::vector<int> > answer;$/;"	m	class:Solution
answer	include/CombinationSum2.h	/^    vector< vector< int > > answer;$/;"	m	class:Solution
async_write_messages	src/main.cpp	/^auto async_write_messages(tcp::socket& socket,$/;"	f
boxes	include/SudokuSolver.h	/^    bool boxes[9][9]= { {false} };$/;"	m	class:Solution
canJump	include/JumpGame.h	/^bool canJump(std::vector<int>& nums)$/;"	f
cols	include/SudokuSolver.h	/^    bool cols[9][9] = { {false} };$/;"	m	class:Solution
combinationSum	include/CombinationSum.h	/^        std::vector< std::vector< int > > combinationSum(std::vector<int>& candidates, int target)$/;"	f	class:Solution
combinationSum2	include/CombinationSum2.h	/^    vector< vector< int > > combinationSum2(vector<int>& candidates, int target)$/;"	f	class:Solution
combine	include/Combination.h	/^    vector<vector<int>> combine(int n, int k)$/;"	f	class:A
combine	include/Combination.h	/^vector<vector<int> > combine(int n , int k)     \/\/No backtracking$/;"	f
comparator	include/MergeKLists.h	/^class comparator{$/;"	c
count	include/N_Queens2.h	/^    int count;$/;"	m	class:Solution2
countAndSay	include/CountAndSay.h	/^    string countAndSay(int n)$/;"	f	class:Solution
dfs	include/WildcardMatch.h	/^    static int dfs(const std::string& s, const std::string& p, int si, int pi)$/;"	f	class:Solution
divide	include/DivideTwoIntegers.h	/^int divide(int dividend, int divisor)$/;"	f
editDistance	include/EditDistance.h	/^int editDistance(const std::string &word1, const std::string &word2) \/\/Best one$/;"	f
findMedianSortedArrays	include/FindMedianSortedArrays.h	/^    static double findMedianSortedArrays(const std::vector<int>& num1, const std::vector<int>& num2)$/;"	f	class:Solution
findSubString	include/SubstringWithConcantenationOfAllWords.h	/^std::vector<int> findSubString(std::string s, std::vector<std::string>& words)$/;"	f
floorDiv	include/SpiralMatrix2.h	/^    long floorDiv(long x, long y) $/;"	f	class:Solution2
floorMod	include/SpiralMatrix2.h	/^    long floorMod(long x, long y)           $/;"	f	class:Solution2
fourSum	include/FourSum.h	/^    static vector<vector<int>> fourSum(vector<int>& nums, int target) $/;"	f	class:Solution1
fourSum	include/FourSum.h	/^    std::vector< std::vector<int> > fourSum(std::vector<int>& nums, int target) $/;"	f	class:Solution
fullJustify	include/TextJustification.h	/^vector<string> fullJustify(vector<string> &words, int maxWidth)$/;"	f
generate	include/LetterComb.h	/^    static void generate(std::vector<std::string>& ret, const string& digits, std::string& soFar, int k, const int& N)$/;"	f	class:S
generateMatrix	include/SpiralMatrix2.h	/^    vector<vector<int>> generateMatrix(int n) $/;"	f	class:Solution1
generateMatrix	include/SpiralMatrix2.h	/^    vector<vector<int>> generateMatrix(int n) $/;"	f	class:Solution2
generateParenthesis	include/GenerateParenthesis.h	/^    static std::vector<std::string> generateParenthesis(int n)$/;"	f	class:Solution
getKey	include/LetterComb.h	/^    static inline const char* getKey(char k)$/;"	f	class:S
getPermutation	include/PermutationSequence.h	/^    std::string getPermutation(int n, int k)$/;"	f	class:Solution
groupAnagrams	include/GroupAnagrams.h	/^std::vector<std::vector<std::string>> groupAnagrams(std::vector<std::string>& strs) \/\/using sort$/;"	f
groupAnagrams2	include/GroupAnagrams.h	/^std::vector<std::vector<std::string>> groupAnagrams2(std::vector<std::string>& strs) \/\/without sort$/;"	f
help	include/Combination.h	/^    void help(int idx, vector<int>& tmp, const int& n, const int& k)        \/\/Backtracking$/;"	f	class:A
insert	include/InsertInterval.h	/^std::vector< std::vector<int> > insert(std::vector< std::vector<int> >& intervals, std::vector<int>& newInterval)$/;"	f
intToRoman	include/IntToRoman.h	/^    static string intToRoman(int num) $/;"	f	class:Solution
isMatch	include/IsMatch.h	/^    static bool isMatch(string s, string p)$/;"	f	class:Solution
isMatch	include/WildcardMatch.h	/^    static bool isMatch(std::string s, std::string p)$/;"	f	class:Solution
isOperator	include/StackProject.h	/^    bool isOperator(char c)$/;"	f	class:pj
isPalindrome	include/IsPalindrome.h	/^    static bool isPalindrome(int x) $/;"	f	class:Solution
isValid	include/IsValid.h	/^        static bool isValid(std::string s)$/;"	f	class:Solution
isValid	include/N_Queens.h	/^    bool isValid(int row)$/;"	f	class:Solution
isValid	include/N_Queens2.h	/^    bool isValid(int row)$/;"	f	class:Solution2
isValidSudoku	include/ValidSudoku.h	/^    static bool isValidSudoku(vector<vector<char> >& board) {$/;"	f	class:Solution
jobScheduling	include/JobScheduling.h	/^int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit)$/;"	f
jump	include/JumpGame2.h	/^int jump(std::vector<int>& nums)$/;"	f
keys	include/LetterComb.h	/^    static constexpr char keys[] = {"abc##" "def##" "ghi##" "jkl##" "mno##" "pqrs#" "tuv##" "wxyz#"};$/;"	m	class:S
len	include/CombinationSum.h	/^        size_t len;$/;"	m	class:Solution
lengthOfLastWord	include/LengthOfLastWord.h	/^int lengthOfLastWord(std::string s)$/;"	f
letterComb	include/LetterComb.h	/^    std::vector<std::string> letterComb(std::string digits)$/;"	f	class:S
longestCommonPrefix	include/LongestCommonPrefix.h	/^    static string longestCommonPrefix(vector<string> &strs)$/;"	f	class:Solution
longestCommonPrefixBetter	include/LongestCommonPrefix.h	/^    static string longestCommonPrefixBetter(vector<string> &strs)$/;"	f	class:Solution
longestPalindrome	include/LongestPalindrome.h	/^    static string longestPalindrome(string s) {$/;"	f	class:Solution
longestValidParentheses	include/LongestValidParentheses.h	/^        static int longestValidParentheses(std::string s)$/;"	f	class:Solution
longestValidParentheses2	include/LongestValidParentheses.h	/^        static int longestValidParentheses2(std::string s)$/;"	f	class:Solution
mInfix	include/StackProject.h	/^    std::string mInfix;$/;"	m	class:pj
mStack	include/StackProject.h	/^    std::stack<std::string> mStack;$/;"	m	class:pj
mVec	include/StackProject.h	/^    std::vector<std::string> mVec;$/;"	m	class:pj
main	src/main.cpp	/^int main()$/;"	f
maxArea	include/MaxArea.h	/^    static int maxArea(vector<int>& height)$/;"	f	class:Solution
maximumSubarray	include/MaximumSubarray.h	/^int maximumSubarray(std::vector<int>& nums)$/;"	f
merge	include/MergeInterval.h	/^    vector< vector<int> > merge(vector< vector<int> >& intervals) $/;"	f	class:Solution
merge	include/MergeKLists.h	/^ListNode* merge(ListNode* l1, ListNode* l2)$/;"	f	class:Solution
mergeKLists	include/MergeKLists.h	/^    ListNode* mergeKLists(vector<ListNode*>& lists) $/;"	f	class:Solution_Priority_Queue
mergeKLists	include/MergeKLists.h	/^ListNode* mergeKLists(std::vector<ListNode*>& lists)$/;"	f	class:Solution
mergeKLists	include/MergeKLists.h	/^ListNode* mergeKLists(std::vector<ListNode*>& lists, int s, int e)$/;"	f	class:Solution
mergeTwoLists	include/MergeTwoLists.h	/^ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)$/;"	f
minDistance	include/EditDistance.h	/^int minDistance(string word1, string word2)         \/\/NOrmal one$/;"	f
minWindow	include/MinimumWindowSubstring.h	/^std::string minWindow(std::string s, std::string t)$/;"	f
multiply	include/MultiplyString.h	/^std::string multiply(std::string num1, std::string num2)$/;"	f
myAtoi	include/MyAtoi.h	/^int myAtoi(std::string str)$/;"	f
myPow	include/Pow.h	/^double myPow(double x, int n)$/;"	f
next	include/AddTwoLinkedLists.h	/^     ListNode *next;$/;"	m	struct:ListNode
next	include/MergeKLists.h	/^     ListNode *next;$/;"	m	struct:ListNode
next	include/MergeTwoLists.h	/^     ListNode *next;$/;"	m	struct:ListNode
next	include/RemoveNthFromEnd.h	/^     ListNode *next;$/;"	m	struct:ListNode
next	include/ReverseKGroup.h	/^     ListNode *next;$/;"	m	struct:ListNode
next	include/RotateList.h	/^    ListNode *next;$/;"	m	struct:ListNode
next	include/SwapPairs.h	/^     ListNode *next;$/;"	m	struct:ListNode
nextPermutation	include/NextPermutation.h	/^    void nextPermutation(std::vector<int>& nums) $/;"	f	class:Solution
nextPermutation	include/Permutation2.h	/^    void nextPermutation(std::vector<int>& nums)$/;"	f	class:Sol2
operator ()	include/MergeKLists.h	/^    bool operator()(ListNode *x,ListNode *y){$/;"	f	class:comparator
path	include/ClimbingStairs.h	/^int path(int n)$/;"	f
permute	include/Permutation.h	/^    vector<vector<int>> permute(vector<int>& nums) $/;"	f	class:Solution
permute	include/Permutation.h	/^    vector<vector<int>> permute(vector<int>& nums)$/;"	f	class:Sol
permute	include/Permutation.h	/^    vector<vector<int>> permute(vector<int>& nums)$/;"	f	class:Sol2
permuteUnique	include/Permutation2.h	/^    std::vector<std::vector<int>> permuteUnique(std::vector<int>& nums) $/;"	f	class:Sol
permuteUnique	include/Permutation2.h	/^    std::vector<std::vector<int>> permuteUnique(std::vector<int>& nums) $/;"	f	class:Sol2
pj	include/StackProject.h	/^class pj$/;"	c
plusOne	include/PlusOne.h	/^std::vector<int> plusOne(std::vector<int>& digits)$/;"	f
print_queue	include/MergeKLists.h	/^void print_queue(T q) {$/;"	f	class:Solution_Priority_Queue
proc	include/TwoSum.h	/^    static std::vector<size_t> proc(const std::vector<T>& nums, T target)$/;"	f	class:TwoSum
queens	include/N_Queens.h	/^    vector<int> queens;$/;"	m	class:Solution
queens	include/N_Queens2.h	/^    vector<int> queens;$/;"	m	class:Solution2
removeNthFromEnd	include/RemoveNthFromEnd.h	/^    ListNode* removeNthFromEnd(ListNode* head, int n) {$/;"	f	class:Solution
reverse	include/ReverseInteger.h	/^    static int reverse(int x) {$/;"	f	class:Solution
reverseKGroup	include/ReverseKGroup.h	/^        static ListNode* reverseKGroup(ListNode* head, int k)$/;"	f	class:Solution
romanToInt	include/RomanToInt.h	/^    int romanToInt(string s)$/;"	f	class:Solution
rotate	include/RotateImage.h	/^void rotate(std::vector<std::vector<int>>& matrix)$/;"	f
rotateRight	include/RotateList.h	/^    ListNode *rotateRight(ListNode *head, int k)$/;"	f	class:Solution
rows	include/SudokuSolver.h	/^    bool rows[9][9] = { {false} };$/;"	m	class:Solution
search	include/SearchInRotatedArray.h	/^int search(std::vector<int>& nums, int target)$/;"	f
searchInsert	include/SearchInsertPosition.h	/^static int searchInsert(vector<int>& nums, int target)          \/\/STL version$/;"	f
searchInsertBinary	include/SearchInsertPosition.h	/^static int searchInsertBinary(vector<int>& nums, int target)   \/\/Binary version$/;"	f
searchMatrix	include/Search2dMatrix.h	/^bool searchMatrix(vector<vector<T>>& matrix, T target)$/;"	f
searchRange	include/FindFirstLastInArray.h	/^std::vector<int> searchRange(std::vector<int>& nums, int target) $/;"	f
setZeroes	include/SetZeroMatrix.h	/^void setZeroes(std::vector<std::vector<int>>& matrix) $/;"	f
simplifyPath	include/SimplifyPath.h	/^std::string simplifyPath(std::string path) $/;"	f
solve	include/CombinationSum.h	/^        void solve(std::vector<int>& candidates, int sum, int start, std::vector<int>& v)$/;"	f	class:Solution
solve	include/CountAndSay.h	/^    string solve(string s)$/;"	f	class:Solution
solve	include/N_Queens.h	/^    void solve(int row, const int& size)$/;"	f	class:Solution
solve	include/N_Queens2.h	/^    void solve(int row, const int& size)$/;"	f	class:Solution2
solve	include/Permutation.h	/^    void solve(vector<int>& nums, int l, int r)$/;"	f	class:Sol2
solve	include/Permutation.h	/^    void solve(vector<int>& nums, vector<int>& tmp, const int& size)$/;"	f	class:Sol
solve	include/Permutation2.h	/^    void solve(std::unordered_map<int, int>& map, std::vector<int>& tmp, const int& size)$/;"	f	class:Sol
solve	include/SudokuSolver.h	/^    bool solve(std::vector< std::vector< char > >& board, int idx)$/;"	f	class:Solution
solveNQueens	include/N_Queens.h	/^    vector<vector<string>> solveNQueens(int n) $/;"	f	class:Solution
solveRecursive	include/CombinationSum2.h	/^    void solveRecursive(It start, It end, int target, std::vector<int>& tmp)$/;"	f	class:Solution
solveSudoku	include/SudokuSolver.h	/^    void solveSudoku(std::vector< std::vector< char > >& board)$/;"	f	class:Solution
sortColors	include/SortColors.h	/^void sortColors(std::vector<int>& nums)$/;"	f
spiralOrder	include/SpiralMatrix.h	/^    std::vector<int> spiralOrder(std::vector< std::vector<int> >& matrix) $/;"	f
sqrt	include/Sqrt.h	/^int sqrt(int n)$/;"	f
swapPairs	include/SwapPairs.h	/^ListNode* swapPairs(ListNode* head)  \/\/My Idea$/;"	f
swapPairsRecursive	include/SwapPairs.h	/^ListNode* swapPairsRecursive(ListNode* head)   \/\/ Recursion version (from someone)$/;"	f
test_callback	src/main.cpp	/^void test_callback()$/;"	f
test_future	src/main.cpp	/^void test_future()$/;"	f
totalNQueens	include/N_Queens2.h	/^    int totalNQueens(int n)  $/;"	f	class:Solution2
trappingRainWater	include/TrappingRainWater.h	/^int trappingRainWater(const std::vector<int>& heights)$/;"	f
twoSum	include/TwoSum.h	/^    static std::vector<int> twoSum(std::vector<int>& nums, int target) $/;"	f	class:Solution
uniquePath	include/UniquePath.h	/^int uniquePath(int m, int n)$/;"	f
uniquePathsWithObstacles	include/UniquePath2.h	/^int uniquePathsWithObstacles(std::vector<std::vector<int>>& obstacleGrid)$/;"	f
val	include/AddTwoLinkedLists.h	/^     int val;$/;"	m	struct:ListNode
val	include/MergeKLists.h	/^     int val;$/;"	m	struct:ListNode
val	include/MergeTwoLists.h	/^     int val;$/;"	m	struct:ListNode
val	include/RemoveNthFromEnd.h	/^     int val;$/;"	m	struct:ListNode
val	include/ReverseKGroup.h	/^     int val;$/;"	m	struct:ListNode
val	include/RotateList.h	/^    int val;$/;"	m	struct:ListNode
val	include/SwapPairs.h	/^     int val;$/;"	m	struct:ListNode
visited	include/Permutation.h	/^    vector<bool> visited;   $/;"	m	class:Sol
